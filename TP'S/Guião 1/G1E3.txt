    Ao correr o G1E2 com diferentes valores é possível ver que para valores pequenos por exemplo:
    java G1E2 4 3, o programa irá ser executado sem grandes problemas e vamos obter valores corretos

    Já para valores maiores vamos nos deparar com alguns erros que são gerados pelas "race conditions" que ocorrem quando múltiplas threads
tentam aceder e modificar ao mesmo recurso de forma concorrente. Por exemplo:
    java G1E2 4 2000, o programa pode entregar diferentes resultados apesar do valor esperado ser 8000 (Depende de computador para computador
no meu caso este valor já demonstra imprecisões)

    Isto ocorre porque o método "increment" da classe "Counter" não é atómico, apesar de aparentar ser uma única operação, esta implica:
        - ler o valor "c" atual da memória
        - incrementar o valor de "c"
        - atualizar o valor de "c" com o novo resultados

    Isto resultará em erro em casos como o seguinte:

    - Thread 1 lê "c" com o valor 1000
    - antes da Thread 1 atualizar "c" com o valor incrementado, a Thread 2 lê "c" com o valor 1000
    - Thread 1 incrementa e atualiza "c" com 1001
    - Thread 2 que leu 1000 da memória, atualiza a variável "c" com o novo valor incrementado que será também 1001.

    Resultado, após duas incrementações o valor mantém se como 1001